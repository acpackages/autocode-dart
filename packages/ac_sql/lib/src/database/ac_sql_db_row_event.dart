import 'package:autocode/autocode.dart';
import 'package:ac_data_dictionary/ac_data_dictionary.dart';

/* AcDoc({
  "summary": "Represents the context for a row-level database event.",
  "description": "This class encapsulates all relevant information for a specific row event (like `beforeInsert` or `afterUpdate`), including the table and row data involved. It is typically passed to event handlers or hooks, which can inspect the data and potentially modify the outcome of the operation by setting the `abortOperation` flag.",
  "example": "// Create an event object for a 'beforeInsert' operation on the 'users' table.\nfinal event = AcSqlDbRowEvent(tableName: 'users')\n  ..eventType = AcEnumDDRowEvent.beforeInsert\n  ..row = {'name': 'John Doe', 'email': 'john.doe@example.com'};\n\n// This event object would then be passed to an event handler.\n// final handlerResult = await myEventHandler.handle(event);\n// if (event.abortOperation) { ... }"
}) */
class AcSqlDbRowEvent {
  /* AcDoc({"summary": "Logger instance for logging within the event handler."}) */
  late AcLogger logger;

  /* AcDoc({"summary": "The name of the table on which the event is occurring."}) */
  String tableName = '';

  /* AcDoc({"summary": "The name of the data dictionary being used."}) */
  String dataDictionaryName = 'default';

  /* AcDoc({"summary": "The data dictionary definition of the table involved in the event."}) */
  late AcDDTable acDDTable;

  /* AcDoc({"summary": "The data dictionary instance."}) */
  late AcDataDictionary acDataDictionary;

  /* AcDoc({"summary": "The WHERE clause condition, relevant for UPDATE or DELETE events."}) */
  String condition = '';

  /* AcDoc({"summary": "The type of row event being processed (e.g., beforeInsert, afterUpdate)."}) */
  AcEnumDDRowEvent eventType = AcEnumDDRowEvent.unknown;

  /* AcDoc({
    "summary": "The data for the row being affected.",
    "description": "For an INSERT or UPDATE, this holds the new data. For a DELETE, it may hold the data of the row being deleted."
  }) */
  dynamic row;

  /* AcDoc({"summary": "A field to hold any result data generated by an event handler."}) */
  dynamic result;

  /* AcDoc({"summary": "A map of parameters associated with the database operation."}) */
  Map<String,dynamic> parameters = {};

  /* AcDoc({
    "summary": "A flag to control the database operation.",
    "description": "If an event handler sets this to `true`, the originating database operation (e.g., the INSERT or UPDATE) will be cancelled."
  }) */
  bool abortOperation = false;

  /* AcDoc({
    "summary": "Creates a new context object for a row-level event.",
    "description": "Initializes the event context for a specific table and loads that table's definition from the data dictionary.\n\nNote: This constructor will throw a runtime error if the `tableName` does not exist in the specified `dataDictionaryName`.",
    "params": [
      {"name": "tableName", "description": "The name of the table for the event."},
      {"name": "dataDictionaryName", "description": "The data dictionary to use. Defaults to 'default'."}
    ]
  }) */
  AcSqlDbRowEvent({required String tableName,String dataDictionaryName = 'default'}) {
    // Correctly assign the instance field from the parameter.
    this.tableName = tableName;
    this.dataDictionaryName = dataDictionaryName;

    // Initialized to prevent LateInitializationError.
    logger = AcLogger();

    // Warning: The force-unwrap operator `!` will cause an error if the table is not found.
    acDDTable = AcDataDictionary.getTable(
      tableName: tableName,
      dataDictionaryName: dataDictionaryName,
    )!;

    acDataDictionary = AcDataDictionary.getInstance(
        dataDictionaryName: dataDictionaryName
    );
  }

  /* AcDoc({
    "summary": "The base execution method for the event.",
    "description": "This method is intended to be called by an event processing system. By default, it returns a successful result. Concrete implementations or handlers would override this to perform actions.",
    "returns": "An `AcResult` indicating the outcome of the event processing.",
    "returns_type": "Future<AcResult>"
  }) */
  Future<AcResult> execute() async {
    AcResult result = AcResult();
    result.setSuccess();
    return result;
  }
}
//
// import 'package:autocode/autocode.dart';
// import 'package:ac_data_dictionary/ac_data_dictionary.dart';
//
// class AcSqlDbRowEvent {
//   late AcLogger logger;
//   String tableName = '';
//   String dataDictionaryName = 'default';
//   late AcDDTable acDDTable;
//   late AcDataDictionary acDataDictionary;
//   String condition = '';
//   AcEnumDDRowEvent eventType = AcEnumDDRowEvent.unknown;
//   dynamic row;
//   dynamic result;
//   Map<String,dynamic> parameters = {};
//   bool abortOperation = false;
//
//   AcSqlDbRowEvent({required String tableName,String dataDictionaryName = 'default'}) {
//     tableName = tableName;
//     acDDTable = AcDataDictionary.getTable(
//       tableName: tableName,
//       dataDictionaryName: dataDictionaryName,
//     )!;
//     acDataDictionary = AcDataDictionary.getInstance();
//   }
//
//   Future<AcResult> execute() async {
//     AcResult result = AcResult();
//     result.setSuccess();
//     return result;
//   }
// }
